{"version":3,"sources":["scripts/main.js"],"names":["cells","document","querySelectorAll","startButton","querySelector","scoreElement","cellsArray","Array","from","score","startMessage","winMessage","loseMessage","startGame","className","textContent","i","length","addNumbers","styleCells","getRandomNumber","Math","random","number1","number2","cell1","getRandomEmptyCell","cell2","array","emptyCells","filter","cell","randomCell","floor","value","makeMove","e","preventDefault","code","moveUp","moveDown","moveLeft","moveRight","moveValueToCell","sourceCell","targetCell","parseInt","isNaN","mergeCells","targetValue","newValue","classList","remove","moved","col","row","currentCell","targetRow","checkGameOver","targetCol","hasAvailableMoves","addEventListener"],"mappings":"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","file":"main.46859ac9.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.button.start');\nconst scoreElement = document.querySelector('.game-score');\nconst cellsArray = Array.from(cells);\nlet score = 0;\nconst startMessage = document.querySelector('.message.message-start');\nconst winMessage = document.querySelector('.message.message-win.hidden');\nconst loseMessage = document.querySelector('.message.message-lose.hidden');\n\nfunction startGame() {\n  startMessage.className = 'message message-start hidden';\n  winMessage.className = 'message message-win hidden';\n  loseMessage.className = 'message message-lose hidden';\n  startButton.className = 'button restart';\n  startButton.textContent = 'Restart';\n  score = 0;\n  scoreElement.textContent = score;\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].textContent = '';\n  }\n\n  addNumbers();\n  styleCells();\n}\n\nfunction getRandomNumber() {\n  return Math.random() < 0.1 ? 4 : 2;\n}\n\nfunction addNumbers() {\n  const number1 = getRandomNumber();\n  const number2 = getRandomNumber();\n\n  const cell1 = getRandomEmptyCell(cellsArray);\n  let cell2 = getRandomEmptyCell(cellsArray);\n\n  if (cell2 === cell1) {\n    cell2 = getRandomEmptyCell(cellsArray);\n  }\n\n  cell1.textContent = number1;\n  cell2.textContent = number2;\n}\n\nfunction getRandomEmptyCell(array) {\n  const emptyCells = array.filter(cell => !cell.textContent);\n  const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n  const randomCell = emptyCells[randomCellIndex];\n\n  return randomCell;\n}\n\nfunction styleCells() {\n  for (let i = 0; i < cells.length; i++) {\n    const value = cells[i].textContent;\n\n    cells[i].className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  }\n}\n\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', makeMove);\n\nfunction makeMove(e) {\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      break;\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n    case 'ArrowRight':\n      moveRight();\n      break;\n    default:\n      break;\n  }\n}\n\nfunction moveValueToCell(sourceCell, targetCell) {\n  const value = parseInt(sourceCell.textContent);\n\n  if (isNaN(value)) {\n    sourceCell.textContent = '';\n    sourceCell.className = 'field-cell';\n\n    return;\n  }\n\n  targetCell.textContent = value;\n  sourceCell.textContent = '';\n  sourceCell.className = 'field-cell';\n  targetCell.className = `field-cell field-cell--${value}`;\n}\n\nfunction mergeCells(sourceCell, targetCell) {\n  const value = parseInt(sourceCell.textContent);\n  const targetValue = parseInt(targetCell.textContent);\n\n  if (isNaN(value) || isNaN(targetValue)) {\n    return;\n  }\n\n  if (value === targetValue) {\n    const newValue = value + targetValue;\n\n    targetCell.textContent = newValue;\n    sourceCell.textContent = '';\n    sourceCell.className = 'field-cell';\n    targetCell.className = `field-cell field-cell--${newValue}`;\n    score += newValue;\n    scoreElement.textContent = score;\n\n    if (newValue === 2048) {\n      winMessage.classList.remove('hidden');\n    }\n  }\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 1; row < 4; row++) {\n      const currentCell = cells[row * 4 + col];\n\n      if (currentCell.textContent) {\n        let targetRow = row - 1;\n\n        while (targetRow >= 0 && !cells[targetRow * 4 + col].textContent) {\n          targetRow--;\n        }\n\n        if (targetRow === -1) {\n          moveValueToCell(currentCell, cells[col]);\n          moved = true;\n        } else if (\n          cells[targetRow * 4 + col].textContent === currentCell.textContent\n        ) {\n          mergeCells(currentCell, cells[targetRow * 4 + col]);\n          moved = true;\n        } else {\n          if (targetRow + 1 !== row) {\n            moveValueToCell(currentCell, cells[(targetRow + 1) * 4 + col]);\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    addNumbers();\n    styleCells();\n    checkGameOver();\n  }\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 2; row >= 0; row--) {\n      const currentCell = cells[row * 4 + col];\n\n      if (currentCell.textContent) {\n        let targetRow = row + 1;\n\n        while (targetRow < 4 && !cells[targetRow * 4 + col].textContent) {\n          targetRow++;\n        }\n\n        if (targetRow === 4) {\n          moveValueToCell(currentCell, cells[3 * 4 + col]);\n          moved = true;\n        } else if (\n          cells[targetRow * 4 + col].textContent === currentCell.textContent\n        ) {\n          mergeCells(currentCell, cells[targetRow * 4 + col]);\n          moved = true;\n        } else {\n          if (targetRow - 1 !== row) {\n            moveValueToCell(currentCell, cells[(targetRow - 1) * 4 + col]);\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    addNumbers();\n    styleCells();\n    checkGameOver();\n  }\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 1; col < 4; col++) {\n      const currentCell = cells[row * 4 + col];\n\n      if (currentCell.textContent) {\n        let targetCol = col - 1;\n\n        while (targetCol >= 0 && !cells[row * 4 + targetCol].textContent) {\n          targetCol--;\n        }\n\n        if (targetCol === -1) {\n          moveValueToCell(currentCell, cells[row * 4]);\n          moved = true;\n        } else if (\n          cells[row * 4 + targetCol].textContent === currentCell.textContent\n        ) {\n          mergeCells(currentCell, cells[row * 4 + targetCol]);\n          moved = true;\n        } else {\n          if (targetCol + 1 !== col) {\n            moveValueToCell(currentCell, cells[row * 4 + targetCol + 1]);\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    addNumbers();\n    styleCells();\n    checkGameOver();\n  }\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 2; col >= 0; col--) {\n      const currentCell = cells[row * 4 + col];\n\n      if (currentCell.textContent) {\n        let targetCol = col + 1;\n\n        while (targetCol < 4 && !cells[row * 4 + targetCol].textContent) {\n          targetCol++;\n        }\n\n        if (targetCol === 4) {\n          moveValueToCell(currentCell, cells[row * 4 + targetCol - 1]);\n          moved = true;\n        } else if (\n          cells[row * 4 + targetCol].textContent === currentCell.textContent\n        ) {\n          mergeCells(currentCell, cells[row * 4 + targetCol]);\n          moved = true;\n        } else {\n          if (targetCol - 1 !== col) {\n            moveValueToCell(currentCell, cells[row * 4 + targetCol - 1]);\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    addNumbers();\n    styleCells();\n    checkGameOver();\n  }\n}\n\nfunction checkGameOver() {\n  let hasAvailableMoves = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const currentCell = cells[row * 4 + col];\n\n      if (!currentCell.textContent) {\n        hasAvailableMoves = true;\n        break;\n      }\n\n      if (\n        (row > 0 && cells[(row - 1) * 4 + col]\n          .textContent === currentCell.textContent)\n        || (row < 3 && cells[(row + 1) * 4 + col]\n          .textContent === currentCell.textContent)\n        || (col > 0 && cells[row * 4 + col - 1]\n          .textContent === currentCell.textContent)\n        || (col < 3 && cells[row * 4 + col + 1]\n          .textContent === currentCell.textContent)\n      ) {\n        hasAvailableMoves = true;\n        break;\n      }\n    }\n  }\n\n  if (!hasAvailableMoves) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n"]}